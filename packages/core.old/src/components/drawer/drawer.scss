@import 'drawer.variables';

:host {
  
  // @prop You can use it to set the width size of the drawer using css variables.
  --plus-drawer-size: 280px;

  // @prop You can use it to set the minimum width size of the drawer using css variables.
  --plus-drawer-mini-size: 80px;
}

:host {
  display: block;
  position: relative;
  overflow: hidden;
  z-index: $drawer-z-index;
}

.backdrop {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1;
  * {
    width: 100%;
    height: 100%;
    background-color: $drawer-backdrop-background-color;
    opacity: $drawer-backdrop-opacity;
  }
}

.root {
  height: 100%;
  position: relative;
  z-index: 1;
}

.backdrop,
.root {
  transition: inherit;
}

.right,
.left {
  width: var(--plus-drawer-size);
}

.top,
.bottom {
  height: var(--plus-drawer-size);
}

.right,
.left.reverse {
  margin: 0 var(--plus-drawer-offset, 0) 0 0;
}

.left,
.right.reverse {
  margin: 0 0 0 var(--plus-drawer-offset, 0);
}

.top,
.bottom.reverse {
  margin: var(--plus-drawer-offset, 0) 0 0 0;
}

.bottom,
.top.reverse {
  margin: 0 0 var(--plus-drawer-offset, 0) 0;
}

// TODO

:host(#{boolean(temporary)}:not([temporary='on-breakpoint'])),
:host([temporary='on-breakpoint'][state='mobile']) {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

:host(#{boolean(animation)}) {
  transition: $drawer-transition;
}

:host([state='closed']) {
  display: none;
}

:host([state='opened'][mini-state='leaved']) {
  overflow: visible;
}

:host([state='open']),
:host([state='closing']) {
  --plus-drawer-offset: calc(var(--plus-drawer-size) * -1) !important;
  .backdrop {
    opacity: 0;
  }
}

:host([mini-state='entering']),
:host([mini-state='entered']),
:host([mini-state='leave']) {
  --plus-drawer-offset: calc(var(--plus-drawer-size) * -1 + var(--plus-drawer-mini-size));
}
