import dynamic from 'next/dynamic';
export const AnimationDefault = dynamic(() => import('./AnimationDefault').then((component) => component), { ssr: false });
export const AnimationDuration = dynamic(() => import('./AnimationDuration').then((component) => component), { ssr: false });
export const AnimationName = dynamic(() => import('./AnimationName').then((component) => component), { ssr: false });
export const AspectRatioDefault = dynamic(() => import('./AspectRatioDefault').then((component) => component), { ssr: false });
export const AspectRatioMore = dynamic(() => import('./AspectRatioMore').then((component) => component), { ssr: false });
export const AspectRatioVideo = dynamic(() => import('./AspectRatioVideo').then((component) => component), { ssr: false });
export const AvatarDefault = dynamic(() => import('./AvatarDefault').then((component) => component), { ssr: false });
export const AvatarGroup = dynamic(() => import('./AvatarGroup').then((component) => component), { ssr: false });
export const AvatarHoverable = dynamic(() => import('./AvatarHoverable').then((component) => component), { ssr: false });
export const AvatarIcon = dynamic(() => import('./AvatarIcon').then((component) => component), { ssr: false });
export const AvatarImage = dynamic(() => import('./AvatarImage').then((component) => component), { ssr: false });
export const AvatarLink = dynamic(() => import('./AvatarLink').then((component) => component), { ssr: false });
export const AvatarShape = dynamic(() => import('./AvatarShape').then((component) => component), { ssr: false });
export const AvatarSize = dynamic(() => import('./AvatarSize').then((component) => component), { ssr: false });
export const AvatarStacked = dynamic(() => import('./AvatarStacked').then((component) => component), { ssr: false });
export const AvatarSvg = dynamic(() => import('./AvatarSvg').then((component) => component), { ssr: false });
export const AvatarText = dynamic(() => import('./AvatarText').then((component) => component), { ssr: false });
export const BreadcrumbCustomExpander = dynamic(() => import('./BreadcrumbCustomExpander').then((component) => component), { ssr: false });
export const BreadcrumbCustomSeparator = dynamic(() => import('./BreadcrumbCustomSeparator').then((component) => component), { ssr: false });
export const BreadcrumbCustomized = dynamic(() => import('./BreadcrumbCustomized').then((component) => component), { ssr: false });
export const BreadcrumbDefault = dynamic(() => import('./BreadcrumbDefault').then((component) => component), { ssr: false });
export const BreadcrumbLimitation = dynamic(() => import('./BreadcrumbLimitation').then((component) => component), { ssr: false });
export const BreadcrumbSeparator = dynamic(() => import('./BreadcrumbSeparator').then((component) => component), { ssr: false });
export const BrowseDefault = dynamic(() => import('./BrowseDefault').then((component) => component), { ssr: false });
export const CardBackgroundColor = dynamic(() => import('./CardBackgroundColor').then((component) => component), { ssr: false });
export const CardBorderColor = dynamic(() => import('./CardBorderColor').then((component) => component), { ssr: false });
export const CardBorderWidth = dynamic(() => import('./CardBorderWidth').then((component) => component), { ssr: false });
export const CardCustomize = dynamic(() => import('./CardCustomize').then((component) => component), { ssr: false });
export const CardDefault = dynamic(() => import('./CardDefault').then((component) => component), { ssr: false });
export const CardElevation = dynamic(() => import('./CardElevation').then((component) => component), { ssr: false });
export const CardOutlined = dynamic(() => import('./CardOutlined').then((component) => component), { ssr: false });
export const CardTile = dynamic(() => import('./CardTile').then((component) => component), { ssr: false });
export const ClickOutsideDefault = dynamic(() => import('./ClickOutsideDefault').then((component) => component), { ssr: false });
export const CounterDefault = dynamic(() => import('./CounterDefault').then((component) => component), { ssr: false });
export const CropperArea = dynamic(() => import('./CropperArea').then((component) => component), { ssr: false });
export const CropperAspectRatio = dynamic(() => import('./CropperAspectRatio').then((component) => component), { ssr: false });
export const CropperBackdrop = dynamic(() => import('./CropperBackdrop').then((component) => component), { ssr: false });
export const CropperBackground = dynamic(() => import('./CropperBackground').then((component) => component), { ssr: false });
export const CropperDefault = dynamic(() => import('./CropperDefault').then((component) => component), { ssr: false });
export const CropperDialog = dynamic(() => import('./CropperDialog').then((component) => component), { ssr: false });
export const CropperGuides = dynamic(() => import('./CropperGuides').then((component) => component), { ssr: false });
export const CropperIndicator = dynamic(() => import('./CropperIndicator').then((component) => component), { ssr: false });
export const CropperMode = dynamic(() => import('./CropperMode').then((component) => component), { ssr: false });
export const CropperShape = dynamic(() => import('./CropperShape').then((component) => component), { ssr: false });
export const CropperStyles = dynamic(() => import('./CropperStyles').then((component) => component), { ssr: false });
export const DialogAnimation = dynamic(() => import('./DialogAnimation').then((component) => component), { ssr: false });
export const DialogBackdrop = dynamic(() => import('./DialogBackdrop').then((component) => component), { ssr: false });
export const DialogDefault = dynamic(() => import('./DialogDefault').then((component) => component), { ssr: false });
export const DialogFullHeight = dynamic(() => import('./DialogFullHeight').then((component) => component), { ssr: false });
export const DialogFullWidth = dynamic(() => import('./DialogFullWidth').then((component) => component), { ssr: false });
export const DialogFullscreen = dynamic(() => import('./DialogFullscreen').then((component) => component), { ssr: false });
export const DialogNesting = dynamic(() => import('./DialogNesting').then((component) => component), { ssr: false });
export const DialogPersistent = dynamic(() => import('./DialogPersistent').then((component) => component), { ssr: false });
export const DialogPlacement = dynamic(() => import('./DialogPlacement').then((component) => component), { ssr: false });
export const DialogPrevent = dynamic(() => import('./DialogPrevent').then((component) => component), { ssr: false });
export const DialogScrollable = dynamic(() => import('./DialogScrollable').then((component) => component), { ssr: false });
export const DialogSize = dynamic(() => import('./DialogSize').then((component) => component), { ssr: false });
export const DialogSpecificScrollable = dynamic(() => import('./DialogSpecificScrollable').then((component) => component), { ssr: false });
export const DialogSticky = dynamic(() => import('./DialogSticky').then((component) => component), { ssr: false });
export const DividerCard = dynamic(() => import('./DividerCard').then((component) => component), { ssr: false });
export const DividerCustomize = dynamic(() => import('./DividerCustomize').then((component) => component), { ssr: false });
export const DividerHorizontal = dynamic(() => import('./DividerHorizontal').then((component) => component), { ssr: false });
export const DividerPlacement = dynamic(() => import('./DividerPlacement').then((component) => component), { ssr: false });
export const DividerType = dynamic(() => import('./DividerType').then((component) => component), { ssr: false });
export const DividerVariant = dynamic(() => import('./DividerVariant').then((component) => component), { ssr: false });
export const DividerVertical = dynamic(() => import('./DividerVertical').then((component) => component), { ssr: false });
export const DividerWidth = dynamic(() => import('./DividerWidth').then((component) => component), { ssr: false });
export const DrawerDefault = dynamic(() => import('./DrawerDefault').then((component) => component), { ssr: false });
export const GridAlignContent = dynamic(() => import('./GridAlignContent').then((component) => component), { ssr: false });
export const GridAlignItems = dynamic(() => import('./GridAlignItems').then((component) => component), { ssr: false });
export const GridAlignSelf = dynamic(() => import('./GridAlignSelf').then((component) => component), { ssr: false });
export const GridAutoSizing = dynamic(() => import('./GridAutoSizing').then((component) => component), { ssr: false });
export const GridDefault = dynamic(() => import('./GridDefault').then((component) => component), { ssr: false });
export const GridGutter = dynamic(() => import('./GridGutter').then((component) => component), { ssr: false });
export const GridGutterX = dynamic(() => import('./GridGutterX').then((component) => component), { ssr: false });
export const GridGutterY = dynamic(() => import('./GridGutterY').then((component) => component), { ssr: false });
export const GridHide = dynamic(() => import('./GridHide').then((component) => component), { ssr: false });
export const GridJustifyContent = dynamic(() => import('./GridJustifyContent').then((component) => component), { ssr: false });
export const GridOffset = dynamic(() => import('./GridOffset').then((component) => component), { ssr: false });
export const GridOrder = dynamic(() => import('./GridOrder').then((component) => component), { ssr: false });
export const GridReverse = dynamic(() => import('./GridReverse').then((component) => component), { ssr: false });
export const GridVertical = dynamic(() => import('./GridVertical').then((component) => component), { ssr: false });
export const GridWrap = dynamic(() => import('./GridWrap').then((component) => component), { ssr: false });
export const IconColor = dynamic(() => import('./IconColor').then((component) => component), { ssr: false });
export const IconCustomColor = dynamic(() => import('./IconCustomColor').then((component) => component), { ssr: false });
export const IconDefault = dynamic(() => import('./IconDefault').then((component) => component), { ssr: false });
export const IconFlip = dynamic(() => import('./IconFlip').then((component) => component), { ssr: false });
export const IconRotate = dynamic(() => import('./IconRotate').then((component) => component), { ssr: false });
export const IconSize = dynamic(() => import('./IconSize').then((component) => component), { ssr: false });
export const IntersectionDefault = dynamic(() => import('./IntersectionDefault').then((component) => component), { ssr: false });
export const IntersectionLazyImage = dynamic(() => import('./IntersectionLazyImage').then((component) => component), { ssr: false });
export const PortalDefault = dynamic(() => import('./PortalDefault').then((component) => component), { ssr: false });
export const PortalStrategy = dynamic(() => import('./PortalStrategy').then((component) => component), { ssr: false });
export const ScrollIndicatorDefault = dynamic(() => import('./ScrollIndicatorDefault').then((component) => component), { ssr: false });
export const SpinnerColor = dynamic(() => import('./SpinnerColor').then((component) => component), { ssr: false });
export const SpinnerCustomSize = dynamic(() => import('./SpinnerCustomSize').then((component) => component), { ssr: false });
export const SpinnerCustomize = dynamic(() => import('./SpinnerCustomize').then((component) => component), { ssr: false });
export const SpinnerDefault = dynamic(() => import('./SpinnerDefault').then((component) => component), { ssr: false });
export const SpinnerSize = dynamic(() => import('./SpinnerSize').then((component) => component), { ssr: false });
export const SpinnerType = dynamic(() => import('./SpinnerType').then((component) => component), { ssr: false });
export const StickyContacts = dynamic(() => import('./StickyContacts').then((component) => component), { ssr: false });
export const StickyDefault = dynamic(() => import('./StickyDefault').then((component) => component), { ssr: false });
export const StickyStateAttribute = dynamic(() => import('./StickyStateAttribute').then((component) => component), { ssr: false });
export const StickyTop = dynamic(() => import('./StickyTop').then((component) => component), { ssr: false });
export const Switch3D = dynamic(() => import('./Switch3D').then((component) => component), { ssr: false });
export const SwitchChecked = dynamic(() => import('./SwitchChecked').then((component) => component), { ssr: false });
export const SwitchCustomized = dynamic(() => import('./SwitchCustomized').then((component) => component), { ssr: false });
export const SwitchDefault = dynamic(() => import('./SwitchDefault').then((component) => component), { ssr: false });
export const SwitchDisabled = dynamic(() => import('./SwitchDisabled').then((component) => component), { ssr: false });
export const SwitchEvent = dynamic(() => import('./SwitchEvent').then((component) => component), { ssr: false });
export const TabsBelow = dynamic(() => import('./TabsBelow').then((component) => component), { ssr: false });
export const TabsDefault = dynamic(() => import('./TabsDefault').then((component) => component), { ssr: false });
export const TabsGrow = dynamic(() => import('./TabsGrow').then((component) => component), { ssr: false });
export const TabsJustify = dynamic(() => import('./TabsJustify').then((component) => component), { ssr: false });
export const TabsReverse = dynamic(() => import('./TabsReverse').then((component) => component), { ssr: false });
export const TabsSeparate = dynamic(() => import('./TabsSeparate').then((component) => component), { ssr: false });
export const TabsVertical = dynamic(() => import('./TabsVertical').then((component) => component), { ssr: false });
export const TooltipArrows = dynamic(() => import('./TooltipArrows').then((component) => component), { ssr: false });
export const TooltipDefault = dynamic(() => import('./TooltipDefault').then((component) => component), { ssr: false });
export const TooltipPlacement = dynamic(() => import('./TooltipPlacement').then((component) => component), { ssr: false });
export const TooltipTrigger = dynamic(() => import('./TooltipTrigger').then((component) => component), { ssr: false });