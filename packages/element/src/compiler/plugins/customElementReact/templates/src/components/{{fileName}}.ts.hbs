/**************************************************
 * THIS FILE IS AUTO-GENERATED, DO NOT EDIT MANUALY
 **************************************************/

import { proxy } from '../proxy';

import '{{importerComponent.source}}';
import type { {{importerComponentType.root}} as Type } from '{{importerComponentType.source}}';

type Rename<T, R extends { [K in keyof R]: K extends keyof T ? PropertyKey : "Error: key not in T" }> = { [P in keyof T as P extends keyof R ? R[P] : P]: T[P] }

type Renamed = Rename<{{importerComponentType.variable}}, { 
  {{#each classEvents}}
  {{from}}: '{{to}}',
  {{/each}}
}>

export const {{className}} = proxy<{{componentInterfaceName}}, Renamed>(
  '{{componentTag}}', 
  [{{#each classProperties}}'{{key.name}}', {{/each}}], 
  [{{#each classEvents}}'{{key.name}}', {{/each}}],
);